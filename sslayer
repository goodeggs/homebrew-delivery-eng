#!/bin/sh

set -o errexit
set -o nounset
set -o pipefail

CA_ROOT_DIR="$HOME/Library/Application Support/mkcert"

fatal() {
  echo "ERROR: $*"
  exit 1
}

log() {
  echo "INFO: $*"
}

configure_dnsmasq() {
  mkdir -p /usr/local/etc
  echo "address=/goodeggs.test/127.0.0.1" > /usr/local/etc/dnsmasq.conf
}

configure_dns_resolver() {
  mkdir -p /etc/resolver
  echo "nameserver 127.0.0.1" > /etc/resolver/goodeggs.test
}

generate_ssl_certificate() {
  mkdir -p "$CA_ROOT_DIR"
  docker run \
    --rm \
    --name mkcert \
    --mount "type=bind,src=$CA_ROOT_DIR,dst=/root/.local/share/mkcert" \
    goodeggs/mkcert \
    '*.goodeggs.test'
  security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain "$CA_ROOT_DIR/rootCA.pem"
}

migrate_from_legacy_sslayer() {
  # Stop legacy sslayer
  if [ "$(brew services list | grep sslayer | awk '{print $2}')" = "started" ]; then
    log "Stopping legacy sslayer..."
    brew services stop sslayer
  fi
}

#
# Commands
#

setup() {
  # Check to ensure the user is logged in (this will succeed if the user is already logged in)
  docker login

  # If upgrading from sslayer v1, make sure to stop it
  migrate_from_legacy_sslayer

  # Generate a new root certificate if one does not yet exist
  if [ ! -e "$CA_ROOT_DIR" ]; then
    generate_ssl_certificate
  fi

  # Configure OS X to send all requests to *.goodeggs.test to localhost
  configure_dnsmasq
  configure_dns_resolver

  log "Finished setting up sslayer. Run \`sslayer start\` as root to start sslayer."
}

start() {
  if ! pgrep dnsmasq > /dev/null; then
    brew services start dnsmasq
  fi

  # If sslayer is already running, bail.
  if [ "$(docker ps --all --filter "name=^sslayer$" --filter "status=running" --format "{{.ID}}")" != "" ]; then
    fatal "sslayer is already running."
  fi

  # If the container already exists, start it.
  if [ "$(docker ps --all --filter "name=^sslayer$" --filter "status=exited" --format "{{.ID}}")" != "" ]; then
    log "Starting existing sslayer container."
    docker start sslayer > /dev/null
    log "Started sslayer."
    return
  fi

  # If no container exists, create one.
  log "Creating a sslayer container."
  docker run -d \
    --name sslayer \
    --restart unless-stopped \
    --mount "type=bind,src=$CA_ROOT_DIR,dst=/usr/local/share/ca-certificates" \
    --mount "type=bind,src=$CA_ROOT_DIR/certs,dst=/etc/nginx/certs" \
    -p 80:80 \
    -p 443:443 \
    goodeggs/sslayer:osx > /dev/null
  log "Started sslayer."
}

stop() {
  brew services stop dnsmasq > /dev/null 2>&1 ||
  docker stop sslayer > /dev/null
}

update() {
  log "Stopping sslayer..."
  docker stop sslayer > /dev/null 2>&1 ||
  docker rm sslayer > /dev/null 2>&1 ||
  docker pull goodeggs/sslayer:osx

  start
}

#
# Main
#

main() {
  if [ "$(id -u)" -ne 0 ]; then
    fatal "Must be run as root"
  fi

  case "${1-}" in
    setup) setup "${2-}" ;;
    start) start "${2-}" ;;
    stop) stop "${2-}" ;;
    update) update "${2-}" ;;
    *) fatal "usage: slayer [setup | server | stop | update]" ;;
  esac
}

main "$@"
